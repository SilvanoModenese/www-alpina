html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-family: inherit;
  font-size: 100%;
  vertical-align: baseline;
}
body {
  line-height: 1;
  color: #000;
  background: #fff;
}
ol,
ul {
  list-style: none;
}
table {
  border-collapse: separate;
  border-spacing: 0;
  vertical-align: middle;
}
caption,
th,
td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}
a img {
  border: none;
}
@font-face {
  font-family: 'Viga';
  src: url(",/fonts/viga/viga-regular-webfont.eot"), url(",/fonts/viga/viga-regular-webfont.woff") format('woff'), url(",/fonts/viga/viga-regular-webfont.ttf") format('truetype'), url(",/fonts/viga/viga-regular-webfont.svg#Viga") format('svg');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-light-webfont.eot"), url(",/fonts/opensans/opensans-light-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-light-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-light-webfont.svg#Open Sans") format('svg');
  font-weight: 300;
  font-style: normal;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-lightitalic-webfont.eot"), url(",/fonts/opensans/opensans-lightitalic-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-lightitalic-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-lightitalic-webfont.svg#Open Sans") format('svg');
  font-weight: 300;
  font-style: italic;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-regular-webfont.eot"), url(",/fonts/opensans/opensans-regular-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-regular-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-regular-webfont.svg#Open Sans") format('svg');
  font-weight: 400;
  font-style: normal;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-italic-webfont.eot"), url(",/fonts/opensans/opensans-italic-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-italic-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-italic-webfont.svg#Open Sans") format('svg');
  font-weight: 400;
  font-style: italic;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-semibolditalic-webfont.eot"), url(",/fonts/opensans/opensans-semibolditalic-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-semibolditalic-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-semibolditalic-webfont.svg#Open Sans") format('svg');
  font-weight: 600;
  font-style: italic;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-semibold-webfont.eot"), url(",/fonts/opensans/opensans-semibold-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-semibold-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-semibold-webfont.svg#Open Sans") format('svg');
  font-weight: 600;
  font-style: normal;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-bold-webfont.eot"), url(",/fonts/opensans/opensans-bold-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-bold-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-bold-webfont.svg#Open Sans") format('svg');
  font-weight: 700;
  font-style: normal;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-bolditalic-webfont.eot"), url(",/fonts/opensans/opensans-bolditalic-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-bolditalic-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-bolditalic-webfont.svg#Open Sans") format('svg');
  font-weight: 700;
  font-style: italic;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-extrabolditalic-webfont.eot"), url(",/fonts/opensans/opensans-extrabolditalic-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-extrabolditalic-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-extrabolditalic-webfont.svg#Open Sans") format('svg');
  font-weight: 800;
  font-style: italic;
}
@font-face {
  font-family: 'Open Sans';
  src: url(",/fonts/opensans/opensans-extrabold-webfont.eot"), url(",/fonts/opensans/opensans-extrabold-webfont.woff") format('woff'), url(",/fonts/opensans/opensans-extrabold-webfont.ttf") format('truetype'), url(",/fonts/opensans/opensans-extrabold-webfont.svg#Open Sans") format('svg');
  font-weight: 800;
  font-style: normal;
}
.title,
h1,
h3,
h4,
h5,
.header__logo {
  font-family: "Viga", sans-serif;
  text-transform: uppercase;
}
.container,
.header__content,
.bottom__content,
.footer {
  max-width: 55rem;
  margin: 0 auto;
}
.paddings {
  padding: 0 5rem;
}
@media only screen and (max-width: 35em) {
  .paddings {
    padding: 0 0.5rem;
  }
}
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
html {
  font-size: 1em;
}
@media only screen and (max-width: 35em) {
  html {
    font-size: 1.2em;
  }
}
body {
  font-family: "Open Sans", sans-serif;
  font-weight: 300;
  line-height: 1.2;
  background-color: #fefefe;
  color: #646464;
}
h1 {
  font-size: 3rem;
}
h2 {
  font-size: 2rem;
  line-height: 1.4;
}
h3,
h5 {
  font-size: 2.5rem;
}
h4 {
  font-size: 1.9rem;
}
a {
  color: inherit;
  text-decoration: none;
  -webkit-transition: opacity 200ms;
  -moz-transition: opacity 200ms;
  -o-transition: opacity 200ms;
  -ms-transition: opacity 200ms;
  transition: opacity 200ms;
}
a:hover {
  opacity: 0.6;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
  filter: alpha(opacity=60);
}
strong {
  font-weight: 600;
}
.header {
  position: fixed;
  width: 100%;
  height: 8rem;
  z-index: 100;
  color: #35393a;
  background-color: #fff;
  -webkit-transition: all 300ms;
  -moz-transition: all 300ms;
  -o-transition: all 300ms;
  -ms-transition: all 300ms;
  transition: all 300ms;
}
@media only screen and (max-width: 35em) {
  .header {
    height: 5rem;
  }
}
.header.isTransparent {
  color: #35393a;
  background-color: transparent;
}
.header__content {
  overflow: hidden;
}
.header__logo {
  float: left;
  font-size: 1.75rem;
  margin-left: 0;
}
.header__logo img {
  width: 8rem;
}
@media only screen and (max-width: 35em) {
  .header__logo img {
    width: 4rem;
  }
}
.header_nav {
  margin: 4rem 1rem 1rem 1rem;
  float: left;
  border-bottom: 0.175rem solid #35393a;
  line-height: 1.6rem;
}
@media only screen and (max-width: 35em) {
  .header_nav {
    margin: 1.15rem 0.2rem 1rem 0.2rem;
  }
}
@media only screen and (max-width: 21em) {
  .header_nav {
    display: inline;
    margin: 0 0.2rem 1rem 0.2rem;
  }
}
.header_nav .item {
  margin: 0 0.5rem 0 0.5rem;
  display: inline;
}
@media only screen and (max-width: 35em) {
  .header_nav .item {
    margin: 0 0 0 0.5rem;
  }
}
.content {
  padding: 9rem 1rem 3rem 1.1rem;
}
@media only screen and (max-width: 35em) {
  .content {
    padding: 5rem 0.4rem 3rem 0.4rem;
  }
}
@media only screen and (max-width: 21em) {
  .content {
    padding: 7rem 0.4rem 3rem 0.4rem;
  }
}
.content_section {
  padding-bottom: 2rem;
}
.content_title {
  font-size: 2rem;
  line-height: 1.4;
}
@media only screen and (max-width: 35em) {
  .content_title {
    font-size: 1.3rem;
  }
}
.content_item {
  margin: 1rem 0 0 0;
}
.bottom {
  background-color: #35393a;
  color: #8b8c8e;
  padding: 1rem;
  height: 160px;
}
@media only screen and (max-width: 35em) {
  .bottom {
    padding: 0.5rem;
  }
}
.bottom__content {
  overflow: hidden;
  position: relative;
}
@media only screen and (max-width: 35em) {
  .bottom__content {
    text-align: center;
  }
}
.bottom__content--left {
  float: left;
}
.bottom__content--left span {
  font-family: "Viga", sans-serif;
  padding: 1rem 0.5rem;
}
@media only screen and (max-width: 35em) {
  .bottom__content--left {
    float: none;
  }
}
.bottom__content--right {
  float: right;
}
@media only screen and (max-width: 35em) {
  .bottom__content--right {
    float: none;
    margin-bottom: 1rem;
  }
}
.bottom__social {
  color: #8b8c8e;
}
.bottom__social-button {
  display: inline-block;
  width: 1.4rem;
  height: 1.4rem;
  -webkit-background-size: 1.4rem;
  -moz-background-size: 1.4rem;
  background-size: 1.4rem;
  vertical-align: middle;
  margin-left: 0.5rem;
}
.bottom__social-button--facebook {
  background-image: url("/images/facebook.svg");
}
.bottom__social-button--twitter {
  background-image: url("/images/twitter.svg");
}
.bottom__social-button--instagram {
  background-image: url("/images/instagram.svg");
}
.footer {
  width: 100%;
  background-color: #fefefe;
  color: #283b72;
  text-align: center;
}
.footer__contacts_container {
  float: left;
  margin: 1rem 0rem 2rem 0rem;
  font-size: 0.5rem;
}
@media only screen and (max-width: 35em) {
  .footer__contacts_container {
    margin: 0.5rem 0 2rem 0;
  }
}
.footer__contacts_container .footer__logo {
  float: left;
  width: 260px;
  line-height: 0.8rem;
  text-align: left;
}
.footer__contacts_container .footer__logo div {
  margin: 0rem 0rem 1rem 0.8rem;
}
.footer__contacts_container .footer__contacts_info {
  float: left;
  line-height: 1rem;
  font-size: 0.65rem;
  text-align: left;
  margin: 0rem 0.5rem 0rem 0.7rem;
}
.footer__contacts_container .footer__contacts_info a {
  text-decoration: underline;
  font-size: 0.75rem;
  line-height: 2rem;
}
/*# sourceMappingURL=data:application/json;base64, */